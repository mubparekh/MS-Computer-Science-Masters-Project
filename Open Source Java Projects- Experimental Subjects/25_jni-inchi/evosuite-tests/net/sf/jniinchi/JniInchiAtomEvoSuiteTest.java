/*
 * This file was automatically generated by EvoSuite
 */

package net.sf.jniinchi;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import net.sf.jniinchi.INCHI_RADICAL;
import net.sf.jniinchi.JniInchiAtom;

public class JniInchiAtomEvoSuiteTest {


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 net.sf.jniinchi.JniInchiAtom.getImplicitTritium()I: root-Branch
   * 2 net.sf.jniinchi.JniInchiAtom.<init>(Ljava/lang/String;)V: root-Branch
   * 3 net.sf.jniinchi.JniInchiAtom.<init>(DDDLjava/lang/String;)V: I57 Branch 1 IFNONNULL L117 - true
   */
  @Test
  public void test0()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("N`1");
      assertNotNull(jniInchiAtom0);
      
      int int0 = jniInchiAtom0.getImplicitTritium();
      assertEquals("InChI Atom: N`1 [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
      assertEquals(0, int0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiAtom.setRadical(Lnet/sf/jniinchi/INCHI_RADICAL;)V: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      INCHI_RADICAL iNCHI_RADICAL0 = INCHI_RADICAL.NONE;
      jniInchiAtom0.setRadical(iNCHI_RADICAL0);
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiAtom.getY()D: root-Branch
   */
  @Test
  public void test2()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      double double0 = jniInchiAtom0.getY();
      assertEquals(0.0, double0, 0.01D);
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiAtom.setImplicitH(I)V: root-Branch
   */
  @Test
  public void test3()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("^");
      assertNotNull(jniInchiAtom0);
      
      jniInchiAtom0.setImplicitH((-111));
      assertEquals(-111, jniInchiAtom0.getImplicitH());
      assertEquals("InChI Atom: ^ [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-111 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiAtom.setImplicitProtium(I)V: root-Branch
   */
  @Test
  public void test4()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      jniInchiAtom0.setImplicitProtium(0);
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiAtom.setInchiRadical(I)V: root-Branch
   */
  @Test
  public void test5()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
      
      jniInchiAtom0.setInchiRadical(1924);
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiAtom.getImplicitDeuterium()I: root-Branch
   */
  @Test
  public void test6()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      int int0 = jniInchiAtom0.getImplicitDeuterium();
      assertEquals(0, int0);
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiAtom.getCharge()I: root-Branch
   */
  @Test
  public void test7()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      int int0 = jniInchiAtom0.getCharge();
      assertEquals(0, int0);
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiAtom.getIsotopicMass()I: root-Branch
   */
  @Test
  public void test8()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      int int0 = jniInchiAtom0.getIsotopicMass();
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
      assertEquals(0, int0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiAtom.setCharge(I)V: root-Branch
   */
  @Test
  public void test9()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      jniInchiAtom0.setCharge(0);
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiAtom.setIsotopicMass(I)V: root-Branch
   */
  @Test
  public void test10()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      jniInchiAtom0.setIsotopicMass((-1801));
      assertEquals(-1801, jniInchiAtom0.getIsotopicMass());
      assertEquals(0.0, jniInchiAtom0.getX(), 0.01D);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiAtom.getElementType()Ljava/lang/String;: root-Branch
   */
  @Test
  public void test11()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      String string0 = jniInchiAtom0.getElementType();
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
      assertNotNull(string0);
      assertEquals(0, jniInchiAtom0.getCharge());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiAtom.getX()D: root-Branch
   */
  @Test
  public void test12()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      double double0 = jniInchiAtom0.getX();
      assertEquals(0.0, double0, 0.01D);
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiAtom.setImplicitDeuterium(I)V: root-Branch
   */
  @Test
  public void test13()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      jniInchiAtom0.setImplicitDeuterium(0);
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiAtom.getInchiRadical()I: root-Branch
   */
  @Test
  public void test14()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      jniInchiAtom0.getInchiRadical();
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
      assertEquals(0.0, jniInchiAtom0.getZ(), 0.01D);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiAtom.getZ()D: root-Branch
   */
  @Test
  public void test15()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      double double0 = jniInchiAtom0.getZ();
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiAtom.getImplicitProtium()I: root-Branch
   */
  @Test
  public void test16()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("^");
      assertNotNull(jniInchiAtom0);
      
      int int0 = jniInchiAtom0.getImplicitProtium();
      assertEquals(0, int0);
      assertEquals("InChI Atom: ^ [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiAtom.setImplicitTritium(I)V: root-Branch
   */
  @Test
  public void test17()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      jniInchiAtom0.setImplicitTritium((-970));
      assertEquals(-970, jniInchiAtom0.getImplicitTritium());
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:-970 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiAtom.getImplicitH()I: root-Branch
   */
  @Test
  public void test18()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      int int0 = jniInchiAtom0.getImplicitH();
      assertEquals((-1), int0);
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiAtom.setIsotopicMassShift(I)V: root-Branch
   */
  @Test
  public void test19()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("N`1");
      assertNotNull(jniInchiAtom0);
      
      jniInchiAtom0.setIsotopicMassShift(0);
      assertEquals(10000, jniInchiAtom0.getIsotopicMass());
      assertEquals("InChI Atom: N`1 [0.0,0.0,0.0] Charge:0 // Iso Mass:10000 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  //Test case number: 20
  /*
   * 2 covered goals:
   * 1 net.sf.jniinchi.JniInchiAtom.getDebugString()Ljava/lang/String;: root-Branch
   * 2 net.sf.jniinchi.JniInchiAtom.debug()V: root-Branch
   */
  @Test
  public void test20()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      jniInchiAtom0.debug();
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
  }

  //Test case number: 21
  /*
   * 3 covered goals:
   * 1 net.sf.jniinchi.JniInchiAtom.getRadical()Lnet/sf/jniinchi/INCHI_RADICAL;: root-Branch
   * 2 net.sf.jniinchi.JniInchiAtom.<init>(Ljava/lang/String;)V: root-Branch
   * 3 net.sf.jniinchi.JniInchiAtom.<init>(DDDLjava/lang/String;)V: I57 Branch 1 IFNONNULL L117 - true
   */
  @Test
  public void test21()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      assertNotNull(jniInchiAtom0);
      
      jniInchiAtom0.getRadical();
      assertEquals("InChI Atom:  [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", jniInchiAtom0.getDebugString());
      assertEquals(-1, jniInchiAtom0.getImplicitH());
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 net.sf.jniinchi.JniInchiAtom.<init>(DDDLjava/lang/String;)V: I57 Branch 1 IFNONNULL L117 - false
   */
  @Test
  public void test22()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = null;
      try {
        jniInchiAtom0 = new JniInchiAtom((-731.1225424219566), (-731.1225424219566), (-731.1225424219566), (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * Chemical element must not be null
         */
      }
  }
}
