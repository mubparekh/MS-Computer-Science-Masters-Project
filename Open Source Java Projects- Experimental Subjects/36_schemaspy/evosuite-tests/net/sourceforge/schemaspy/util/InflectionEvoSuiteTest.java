/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.schemaspy.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import net.sourceforge.schemaspy.util.Inflection;

public class InflectionEvoSuiteTest {


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 net.sourceforge.schemaspy.util.Inflection.<init>(Ljava/lang/String;)V: root-Branch
   * 2 net.sourceforge.schemaspy.util.Inflection.<init>(Ljava/lang/String;Ljava/lang/String;Z)V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      Inflection inflection0 = new Inflection("fish");
      assertNotNull(inflection0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 net.sourceforge.schemaspy.util.Inflection.<init>(Ljava/lang/String;Ljava/lang/String;)V: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      Inflection inflection0 = new Inflection("fish", "fish");
      assertNotNull(inflection0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 net.sourceforge.schemaspy.util.Inflection.match(Ljava/lang/String;)Z: I8 Branch 1 IFEQ L148 - true
   */
  @Test
  public void test2()  throws Throwable  {
      Inflection inflection0 = new Inflection("sis$", "sis$", false);
      boolean boolean0 = inflection0.match("sis$s");
      assertEquals(false, boolean0);
  }

  //Test case number: 3
  /*
   * 9 covered goals:
   * 1 net.sourceforge.schemaspy.util.Inflection.match(Ljava/lang/String;)Z: I8 Branch 1 IFEQ L148 - false
   * 2 net.sourceforge.schemaspy.util.Inflection.replace(Ljava/lang/String;)Ljava/lang/String;: I8 Branch 2 IFEQ L161 - false
   * 3 net.sourceforge.schemaspy.util.Inflection.pluralize(Ljava/lang/String;)Ljava/lang/String;: I4 Branch 3 IFEQ L173 - true
   * 4 net.sourceforge.schemaspy.util.Inflection.pluralize(Ljava/lang/String;)Ljava/lang/String;: I17 Branch 4 IFEQ L177 - false
   * 5 net.sourceforge.schemaspy.util.Inflection.pluralize(Ljava/lang/String;)Ljava/lang/String;: I27 Branch 5 IFEQ L178 - true
   * 6 net.sourceforge.schemaspy.util.Inflection.pluralize(Ljava/lang/String;)Ljava/lang/String;: I27 Branch 5 IFEQ L178 - false
   * 7 net.sourceforge.schemaspy.util.Inflection.isUncountable(Ljava/lang/String;)Z: I8 Branch 9 IFEQ L211 - true
   * 8 net.sourceforge.schemaspy.util.Inflection.isUncountable(Ljava/lang/String;)Z: I8 Branch 9 IFEQ L211 - false
   * 9 net.sourceforge.schemaspy.util.Inflection.isUncountable(Ljava/lang/String;)Z: I18 Branch 10 IFLE L212 - true
   */
  @Test
  public void test3()  throws Throwable  {
      String string0 = Inflection.pluralize("sis$");
      assertNotNull(string0);
      assertEquals("sis$s", string0);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 net.sourceforge.schemaspy.util.Inflection.replace(Ljava/lang/String;)Ljava/lang/String;: I8 Branch 2 IFEQ L161 - true
   * 2 net.sourceforge.schemaspy.util.Inflection.<init>(Ljava/lang/String;Ljava/lang/String;Z)V: root-Branch
   */
  @Test
  public void test4()  throws Throwable  {
      Inflection inflection0 = new Inflection("sis$", "sis$", false);
      String string0 = inflection0.replace("fish");
      assertEquals("fish", string0);
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 net.sourceforge.schemaspy.util.Inflection.pluralize(Ljava/lang/String;)Ljava/lang/String;: I4 Branch 3 IFEQ L173 - false
   * 2 net.sourceforge.schemaspy.util.Inflection.isUncountable(Ljava/lang/String;)Z: I18 Branch 10 IFLE L212 - false
   */
  @Test
  public void test5()  throws Throwable  {
      String string0 = Inflection.pluralize("fish");
      assertNotNull(string0);
      assertEquals("fish", string0);
  }

  //Test case number: 6
  /*
   * 4 covered goals:
   * 1 net.sourceforge.schemaspy.util.Inflection.singularize(Ljava/lang/String;)Ljava/lang/String;: I4 Branch 6 IFEQ L191 - true
   * 2 net.sourceforge.schemaspy.util.Inflection.singularize(Ljava/lang/String;)Ljava/lang/String;: I17 Branch 7 IFEQ L195 - true
   * 3 net.sourceforge.schemaspy.util.Inflection.singularize(Ljava/lang/String;)Ljava/lang/String;: I17 Branch 7 IFEQ L195 - false
   * 4 net.sourceforge.schemaspy.util.Inflection.singularize(Ljava/lang/String;)Ljava/lang/String;: I27 Branch 8 IFEQ L197 - true
   */
  @Test
  public void test6()  throws Throwable  {
      String string0 = Inflection.singularize("sis$");
      assertEquals("sis$", string0);
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 net.sourceforge.schemaspy.util.Inflection.singularize(Ljava/lang/String;)Ljava/lang/String;: I4 Branch 6 IFEQ L191 - false
   * 2 net.sourceforge.schemaspy.util.Inflection.isUncountable(Ljava/lang/String;)Z: I18 Branch 10 IFLE L212 - false
   */
  @Test
  public void test7()  throws Throwable  {
      String string0 = Inflection.singularize("fish");
      assertEquals("fish", string0);
  }

  //Test case number: 8
  /*
   * 9 covered goals:
   * 1 net.sourceforge.schemaspy.util.Inflection.singularize(Ljava/lang/String;)Ljava/lang/String;: I27 Branch 8 IFEQ L197 - false
   * 2 net.sourceforge.schemaspy.util.Inflection.match(Ljava/lang/String;)Z: I8 Branch 1 IFEQ L148 - false
   * 3 net.sourceforge.schemaspy.util.Inflection.isUncountable(Ljava/lang/String;)Z: I8 Branch 9 IFEQ L211 - true
   * 4 net.sourceforge.schemaspy.util.Inflection.isUncountable(Ljava/lang/String;)Z: I8 Branch 9 IFEQ L211 - false
   * 5 net.sourceforge.schemaspy.util.Inflection.isUncountable(Ljava/lang/String;)Z: I18 Branch 10 IFLE L212 - true
   * 6 net.sourceforge.schemaspy.util.Inflection.singularize(Ljava/lang/String;)Ljava/lang/String;: I4 Branch 6 IFEQ L191 - true
   * 7 net.sourceforge.schemaspy.util.Inflection.singularize(Ljava/lang/String;)Ljava/lang/String;: I17 Branch 7 IFEQ L195 - false
   * 8 net.sourceforge.schemaspy.util.Inflection.singularize(Ljava/lang/String;)Ljava/lang/String;: I27 Branch 8 IFEQ L197 - true
   * 9 net.sourceforge.schemaspy.util.Inflection.replace(Ljava/lang/String;)Ljava/lang/String;: I8 Branch 2 IFEQ L161 - false
   */
  @Test
  public void test8()  throws Throwable  {
      String string0 = Inflection.singularize("sis$s");
      assertEquals("sis$", string0);
      assertNotNull(string0);
  }
}
