/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.schemaspy.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import java.io.File;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import net.sourceforge.schemaspy.util.Dot;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class DotEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
  } 

  @Before 
  public void initTestCase(){ 
  } 

  @After 
  public void doneWithTestCase(){ 
  } 


  //Test case number: 1
  /*
   * 20 covered goals:
   * 1 net.sourceforge.schemaspy.util.Dot.getVersion()Lnet/sourceforge/schemaspy/util/Version;: root-Branch
   * 2 net.sourceforge.schemaspy.util.Dot.getFormat()Ljava/lang/String;: root-Branch
   * 3 net.sourceforge.schemaspy.util.Dot.exists()Z: I5 Branch 7 IFNULL L93 - true
   * 4 net.sourceforge.schemaspy.util.Dot.requiresGdRenderer()Z: I9 Branch 12 IFLT L143 - true
   * 5 net.sourceforge.schemaspy.util.Dot.getRenderer()Ljava/lang/String;: I4 Branch 16 IFNONNULL L168 - true
   * 6 net.sourceforge.schemaspy.util.Dot.getRenderer()Ljava/lang/String;: I16 Branch 17 IFEQ L172 - true
   * 7 net.sourceforge.schemaspy.util.Dot.getRenderer()Ljava/lang/String;: I23 Branch 18 IFEQ L172 - true
   * 8 net.sourceforge.schemaspy.util.Dot.supportsRenderer(Ljava/lang/String;)Z: I4 Branch 23 IFNE L207 - false
   * 9 net.sourceforge.schemaspy.util.Dot.getExe()Ljava/lang/String;: I4 Branch 29 IFNONNULL L249 - true
   * 10 net.sourceforge.schemaspy.util.Dot.generateDiagram(Ljava/io/File;Ljava/io/File;)Ljava/lang/String;: I243 Branch 35 IFNULL L310 - true
   * 11 net.sourceforge.schemaspy.util.Dot.getDisplayableCommand([Ljava/lang/String;)Ljava/lang/String;: I14 Branch 36 IF_ICMPGE L328 - true
   * 12 net.sourceforge.schemaspy.util.Dot.getDisplayableCommand([Ljava/lang/String;)Ljava/lang/String;: I14 Branch 36 IF_ICMPGE L328 - false
   * 13 net.sourceforge.schemaspy.util.Dot.getDisplayableCommand([Ljava/lang/String;)Ljava/lang/String;: I30 Branch 37 IF_ICMPGE L330 - true
   * 14 net.sourceforge.schemaspy.util.Dot.getDisplayableCommand([Ljava/lang/String;)Ljava/lang/String;: I30 Branch 37 IF_ICMPGE L330 - false
   * 15 net.sourceforge.schemaspy.util.Dot.getRenderer()Ljava/lang/String;: I4 Branch 16 IFNONNULL L168 - false
   * 16 net.sourceforge.schemaspy.util.Dot.isValid()Z: I4 Branch 8 IFEQ L101 - true
   * 17 net.sourceforge.schemaspy.util.Dot.setRenderer(Ljava/lang/String;)V: I4 Branch 14 IFEQ L156 - true
   * 18 net.sourceforge.schemaspy.util.Dot.setHighQuality(Z)V: I3 Branch 19 IFEQ L183 - false
   * 19 net.sourceforge.schemaspy.util.Dot.setHighQuality(Z)V: I7 Branch 20 IFEQ L183 - true
   * 20 net.sourceforge.schemaspy.util.Dot.setHighQuality(Z)V: I19 Branch 21 IFEQ L185 - true
   */
  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Dot dot0 = Dot.getInstance();
          assertNotNull(dot0);
          
          File file0 = new File("dot version 2.2.1 or versions greater than 2.4");
          // Undeclared exception!
          try {
            dot0.generateDiagram(file0, file0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (\"java.io.FilePermission\" \"<<ALL FILES>>\" \"execute\")
             * java.lang.Thread.getStackTrace(Thread.java:1589)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkExec(SecurityManager.java:799)
             * java.lang.ProcessBuilder.start(ProcessBuilder.java:1016)
             * java.lang.Runtime.exec(Runtime.java:617)
             * java.lang.Runtime.exec(Runtime.java:485)
             * net.sourceforge.schemaspy.util.Dot.generateDiagram(Dot.java:285)
             * sun.reflect.GeneratedMethodAccessor62.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             * java.lang.reflect.Method.invoke(Method.java:606)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask.run(FutureTask.java:262)
             * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
             * java.lang.Thread.run(Thread.java:745)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 net.sourceforge.schemaspy.util.Dot.setFormat(Ljava/lang/String;)V: root-Branch
   */
  @Test
  public void test2()  throws Throwable  {
      Dot dot0 = Dot.getInstance();
      dot0.setFormat("dot version 2.2.1 or versions greater than 2.4");
      assertEquals("dot version 2.2.1 or versions greater than 2.4", dot0.getSupportedVersions());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 net.sourceforge.schemaspy.util.Dot.supportsCenteredEastWestEdges()Z: I9 Branch 11 IFLT L109 - true
   */
  @Test
  public void test3()  throws Throwable  {
      Dot dot0 = Dot.getInstance();
      assertNotNull(dot0);
      
      boolean boolean0 = dot0.supportsCenteredEastWestEdges();
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 10 covered goals:
   * 1 net.sourceforge.schemaspy.util.Dot.getRenderer()Ljava/lang/String;: I4 Branch 16 IFNONNULL L168 - false
   * 2 net.sourceforge.schemaspy.util.Dot.setHighQuality(Z)V: I3 Branch 19 IFEQ L183 - false
   * 3 net.sourceforge.schemaspy.util.Dot.setHighQuality(Z)V: I7 Branch 20 IFEQ L183 - true
   * 4 net.sourceforge.schemaspy.util.Dot.setHighQuality(Z)V: I19 Branch 21 IFEQ L185 - true
   * 5 net.sourceforge.schemaspy.util.Dot.isHighQuality()Z: I7 Branch 22 IF_ICMPEQ L196 - true
   * 6 net.sourceforge.schemaspy.util.Dot.getVersion()Lnet/sourceforge/schemaspy/util/Version;: root-Branch
   * 7 net.sourceforge.schemaspy.util.Dot.getRenderer()Ljava/lang/String;: I4 Branch 16 IFNONNULL L168 - true
   * 8 net.sourceforge.schemaspy.util.Dot.getRenderer()Ljava/lang/String;: I16 Branch 17 IFEQ L172 - true
   * 9 net.sourceforge.schemaspy.util.Dot.getRenderer()Ljava/lang/String;: I23 Branch 18 IFEQ L172 - true
   * 10 net.sourceforge.schemaspy.util.Dot.requiresGdRenderer()Z: I9 Branch 12 IFLT L143 - true
   */
  @Test
  public void test4()  throws Throwable  {
      Dot dot0 = Dot.getInstance();
      assertNotNull(dot0);
      
      boolean boolean0 = dot0.isHighQuality();
      assertEquals("", dot0.getRenderer());
      assertEquals(false, boolean0);
      assertEquals(false, dot0.exists());
  }

  //Test case number: 5
  /*
   * 7 covered goals:
   * 1 net.sourceforge.schemaspy.util.Dot.setHighQuality(Z)V: I3 Branch 19 IFEQ L183 - true
   * 2 net.sourceforge.schemaspy.util.Dot.getInstance()Lnet/sourceforge/schemaspy/util/Dot;: root-Branch
   * 3 net.sourceforge.schemaspy.util.Dot.isValid()Z: I4 Branch 8 IFEQ L101 - true
   * 4 net.sourceforge.schemaspy.util.Dot.setRenderer(Ljava/lang/String;)V: I4 Branch 14 IFEQ L156 - true
   * 5 net.sourceforge.schemaspy.util.Dot.setHighQuality(Z)V: I19 Branch 21 IFEQ L185 - true
   * 6 net.sourceforge.schemaspy.util.Dot.supportsRenderer(Ljava/lang/String;)Z: I4 Branch 23 IFNE L207 - false
   * 7 net.sourceforge.schemaspy.util.Dot.exists()Z: I5 Branch 7 IFNULL L93 - true
   */
  @Test
  public void test5()  throws Throwable  {
      Dot dot0 = Dot.getInstance();
      assertNotNull(dot0);
      
      dot0.setHighQuality(false);
      assertEquals(false, dot0.isValid());
      assertEquals(false, dot0.exists());
      assertEquals("", dot0.getRenderer());
  }
}
