/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.crypto.hash;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import org.jsecurity.crypto.hash.Sha256Hash;

public class Sha256HashEvoSuiteTest {


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 org.jsecurity.crypto.hash.Sha256Hash.<init>()V: root-Branch
   * 2 org.jsecurity.crypto.hash.Sha256Hash.fromBase64String(Ljava/lang/String;)Lorg/jsecurity/crypto/hash/Sha256Hash;: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      Sha256Hash sha256Hash0 = Sha256Hash.fromBase64String("");
      assertEquals("", sha256Hash0.toHex());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 org.jsecurity.crypto.hash.Sha256Hash.getAlgorithmName()Ljava/lang/String;: root-Branch
   * 2 org.jsecurity.crypto.hash.Sha256Hash.<init>(Ljava/lang/Object;Ljava/lang/Object;)V: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      Sha256Hash sha256Hash0 = new Sha256Hash((Object) "", (Object) "\u0014\u0000\u0000\uFFFD\u0000\uFFFDO");
      assertEquals("129f11fb5603be89434642b46d8996448da58660784e65db0fa5f762387be8f9", sha256Hash0.toString());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 org.jsecurity.crypto.hash.Sha256Hash.fromHexString(Ljava/lang/String;)Lorg/jsecurity/crypto/hash/Sha256Hash;: root-Branch
   * 2 org.jsecurity.crypto.hash.Sha256Hash.<init>()V: root-Branch
   */
  @Test
  public void test2()  throws Throwable  {
      Sha256Hash sha256Hash0 = Sha256Hash.fromHexString("");
      assertEquals("", sha256Hash0.toString());
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 org.jsecurity.crypto.hash.Sha256Hash.<init>(Ljava/lang/Object;)V: root-Branch
   * 2 org.jsecurity.crypto.hash.Sha256Hash.getAlgorithmName()Ljava/lang/String;: root-Branch
   */
  @Test
  public void test3()  throws Throwable  {
      Sha256Hash sha256Hash0 = new Sha256Hash((Object) "");
      assertEquals("47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=", sha256Hash0.toBase64());
  }
}
