/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.authz.permission;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import org.jsecurity.authz.Permission;
import org.jsecurity.authz.permission.AllPermission;
import org.jsecurity.authz.permission.WildcardPermission;

public class WildcardPermissionEvoSuiteTest {


  //Test case number: 2
  /*
   * 5 covered goals:
   * 1 org.jsecurity.authz.permission.WildcardPermission.<init>(Ljava/lang/String;Z)V: I72 Branch 5 IFLE L148 - false
   * 2 org.jsecurity.authz.permission.WildcardPermission.lowercase(Ljava/util/Set;)Ljava/util/Set;: I16 Branch 7 IFEQ L162 - true
   * 3 org.jsecurity.authz.permission.WildcardPermission.<init>(Ljava/lang/String;Z)V: I11 Branch 2 IFNE L132 - true
   * 4 org.jsecurity.authz.permission.WildcardPermission.<init>(Ljava/lang/String;Z)V: I46 Branch 3 IFEQ L141 - false
   * 5 org.jsecurity.authz.permission.WildcardPermission.<init>(Ljava/lang/String;Z)V: I61 Branch 4 IFNE L144 - false
   */
  @Test
  public void test2()  throws Throwable  {
      WildcardPermission wildcardPermission0 = null;
      try {
        wildcardPermission0 = new WildcardPermission(",");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Wildcard string cannot contain parts with only dividers. Make sure permission strings are properly formatted.
         */
      }
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 org.jsecurity.authz.permission.WildcardPermission.<init>(Ljava/lang/String;Z)V: I95 Branch 6 IFLE L155 - false
   * 2 org.jsecurity.authz.permission.WildcardPermission.<init>(Ljava/lang/String;Z)V: I46 Branch 3 IFEQ L141 - true
   */
  @Test
  public void test3()  throws Throwable  {
      WildcardPermission wildcardPermission0 = null;
      try {
        wildcardPermission0 = new WildcardPermission(":");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Wildcard string cannot contain only dividers. Make sure permission strings are properly formatted.
         */
      }
  }

  //Test case number: 5
  /*
   * 8 covered goals:
   * 1 org.jsecurity.authz.permission.WildcardPermission.implies(Lorg/jsecurity/authz/Permission;)Z: I44 Branch 10 IF_ICMPGE L194 - false
   * 2 org.jsecurity.authz.permission.WildcardPermission.implies(Lorg/jsecurity/authz/Permission;)Z: I62 Branch 11 IFGT L200 - true
   * 3 org.jsecurity.authz.permission.WildcardPermission.getParts()Ljava/util/List;: root-Branch
   * 4 org.jsecurity.authz.permission.WildcardPermission.<init>(Ljava/lang/String;)V: root-Branch
   * 5 org.jsecurity.authz.permission.WildcardPermission.lowercase(Ljava/util/Set;)Ljava/util/Set;: I16 Branch 7 IFEQ L162 - false
   * 6 org.jsecurity.authz.permission.WildcardPermission.implies(Lorg/jsecurity/authz/Permission;)Z: I4 Branch 8 IFNE L181 - true
   * 7 org.jsecurity.authz.permission.WildcardPermission.implies(Lorg/jsecurity/authz/Permission;)Z: I31 Branch 9 IFEQ L190 - false
   * 8 org.jsecurity.authz.permission.WildcardPermission.implies(Lorg/jsecurity/authz/Permission;)Z: I44 Branch 10 IF_ICMPGE L194 - true
   */
  @Test
  public void test5()  throws Throwable  {
      WildcardPermission wildcardPermission0 = new WildcardPermission("*", true);
      assertNotNull(wildcardPermission0);
      
      WildcardPermission wildcardPermission1 = new WildcardPermission("An6_C5:D:8/e/#Q/$-\"");
      assertNotNull(wildcardPermission1);
      
      boolean boolean0 = wildcardPermission0.implies((Permission) wildcardPermission1);
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 3 covered goals:
   * 1 org.jsecurity.authz.permission.WildcardPermission.implies(Lorg/jsecurity/authz/Permission;)Z: I62 Branch 11 IFGT L200 - false
   * 2 org.jsecurity.authz.permission.WildcardPermission.implies(Lorg/jsecurity/authz/Permission;)Z: I66 Branch 12 IFGT L200 - false
   * 3 org.jsecurity.authz.permission.WildcardPermission.<init>(Ljava/lang/String;Z)V: I61 Branch 4 IFNE L144 - true
   */
  @Test
  public void test6()  throws Throwable  {
      WildcardPermission wildcardPermission0 = new WildcardPermission("*", true);
      assertNotNull(wildcardPermission0);
      
      WildcardPermission wildcardPermission1 = new WildcardPermission("An6_C5:D:8/e/#Q/$-\"");
      assertNotNull(wildcardPermission1);
      
      boolean boolean0 = wildcardPermission1.implies((Permission) wildcardPermission0);
      assertEquals(false, boolean0);
  }
}
