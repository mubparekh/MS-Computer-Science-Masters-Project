/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import java.text.ParseException;
import java.util.Collection;
import org.jsecurity.util.StringUtils;

public class StringUtilsEvoSuiteTest {


  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 org.jsecurity.util.StringUtils.<init>()V: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
  }

  //Test case number: 3
  /*
   * 5 covered goals:
   * 1 org.jsecurity.util.StringUtils.hasText(Ljava/lang/String;)Z: I4 Branch 1 IFNE L72 - true
   * 2 org.jsecurity.util.StringUtils.hasText(Ljava/lang/String;)Z: I21 Branch 2 IF_ICMPGE L76 - false
   * 3 org.jsecurity.util.StringUtils.hasText(Ljava/lang/String;)Z: I28 Branch 3 IFNE L77 - false
   * 4 org.jsecurity.util.StringUtils.hasLength(Ljava/lang/String;)Z: I3 Branch 4 IFNULL L100 - false
   * 5 org.jsecurity.util.StringUtils.hasLength(Ljava/lang/String;)Z: I6 Branch 5 IFLE L100 - false
   */
  @Test
  public void test3()  throws Throwable  {
      boolean boolean0 = StringUtils.hasText("] to form a key/value pair.");
      assertEquals(true, boolean0);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 org.jsecurity.util.StringUtils.hasText(Ljava/lang/String;)Z: I4 Branch 1 IFNE L72 - false
   * 2 org.jsecurity.util.StringUtils.hasLength(Ljava/lang/String;)Z: I3 Branch 4 IFNULL L100 - true
   */
  @Test
  public void test4()  throws Throwable  {
      boolean boolean0 = StringUtils.hasText((String) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 5 covered goals:
   * 1 org.jsecurity.util.StringUtils.hasText(Ljava/lang/String;)Z: I21 Branch 2 IF_ICMPGE L76 - true
   * 2 org.jsecurity.util.StringUtils.hasText(Ljava/lang/String;)Z: I28 Branch 3 IFNE L77 - true
   * 3 org.jsecurity.util.StringUtils.hasText(Ljava/lang/String;)Z: I4 Branch 1 IFNE L72 - true
   * 4 org.jsecurity.util.StringUtils.hasText(Ljava/lang/String;)Z: I21 Branch 2 IF_ICMPGE L76 - false
   * 5 org.jsecurity.util.StringUtils.hasLength(Ljava/lang/String;)Z: I6 Branch 5 IFLE L100 - false
   */
  @Test
  public void test5()  throws Throwable  {
      boolean boolean0 = StringUtils.hasText(" ");
      assertEquals(false, boolean0);
  }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 org.jsecurity.util.StringUtils.startsWithIgnoreCase(Ljava/lang/String;Ljava/lang/String;)Z: I3 Branch 6 IFNULL L116 - false
   * 2 org.jsecurity.util.StringUtils.startsWithIgnoreCase(Ljava/lang/String;Ljava/lang/String;)Z: I5 Branch 7 IFNONNULL L116 - true
   * 3 org.jsecurity.util.StringUtils.startsWithIgnoreCase(Ljava/lang/String;Ljava/lang/String;)Z: I16 Branch 8 IFLE L119 - false
   */
  @Test
  public void test8()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("<}y=gD[)ba>", "<}y=gD[)ba>");
      assertEquals(true, boolean0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 org.jsecurity.util.StringUtils.startsWithIgnoreCase(Ljava/lang/String;Ljava/lang/String;)Z: I5 Branch 7 IFNONNULL L116 - false
   */
  @Test
  public void test9()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", (String) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * 1 org.jsecurity.util.StringUtils.startsWithIgnoreCase(Ljava/lang/String;Ljava/lang/String;)Z: I16 Branch 8 IFLE L119 - true
   * 2 org.jsecurity.util.StringUtils.startsWithIgnoreCase(Ljava/lang/String;Ljava/lang/String;)Z: I27 Branch 9 IF_ICMPGE L122 - true
   */
  @Test
  public void test10()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("DUDlE$G8d5!d\u0005", "2LBn1g{(zUdxe");
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 4 covered goals:
   * 1 org.jsecurity.util.StringUtils.startsWithIgnoreCase(Ljava/lang/String;Ljava/lang/String;)Z: I27 Branch 9 IF_ICMPGE L122 - false
   * 2 org.jsecurity.util.StringUtils.startsWithIgnoreCase(Ljava/lang/String;Ljava/lang/String;)Z: I3 Branch 6 IFNULL L116 - false
   * 3 org.jsecurity.util.StringUtils.startsWithIgnoreCase(Ljava/lang/String;Ljava/lang/String;)Z: I5 Branch 7 IFNONNULL L116 - true
   * 4 org.jsecurity.util.StringUtils.startsWithIgnoreCase(Ljava/lang/String;Ljava/lang/String;)Z: I16 Branch 8 IFLE L119 - true
   */
  @Test
  public void test11()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("v", "=QkSxsff;7QwT");
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 6 covered goals:
   * 1 org.jsecurity.util.StringUtils.clean(Ljava/lang/String;)Ljava/lang/String;: I18 Branch 11 IFLE L151 - false
   * 2 org.jsecurity.util.StringUtils.splitKeyValue(Ljava/lang/String;)[Ljava/lang/String;: I8 Branch 18 IFNONNULL L242 - true
   * 3 org.jsecurity.util.StringUtils.splitKeyValue(Ljava/lang/String;)[Ljava/lang/String;: I25 Branch 19 IF_ICMPEQ L246 - false
   * 4 org.jsecurity.util.StringUtils.splitKeyValue(Ljava/lang/String;)[Ljava/lang/String;: I38 Branch 20 IF_ICMPEQ L249 - true
   * 5 org.jsecurity.util.StringUtils.splitKeyValue(Ljava/lang/String;)[Ljava/lang/String;: I88 Branch 21 IFLE L259 - true
   * 6 org.jsecurity.util.StringUtils.splitKeyValue(Ljava/lang/String;)[Ljava/lang/String;: I105 Branch 22 IFNONNULL L265 - false
   */
  @Test
  public void test13()  throws Throwable  {
      try {
        StringUtils.splitKeyValue("=QkSxsff;7QwTv");
        fail("Expecting exception: ParseException");
      } catch(ParseException e) {
        /*
         * No valid key could be found in line [=QkSxsff;7QwTv] to form a key/value pair.
         */
      }
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 org.jsecurity.util.StringUtils.tokenizeToStringArray(Ljava/lang/String;Ljava/lang/String;ZZ)[Ljava/lang/String;: I3 Branch 12 IFNONNULL L205 - false
   */
  @Test
  public void test14()  throws Throwable  {
      String[] stringArray0 = StringUtils.tokenizeToStringArray((String) null, (String) null, false, false);
      assertNull(stringArray0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 org.jsecurity.util.StringUtils.toStringArray(Ljava/util/Collection;)[Ljava/lang/String;: I3 Branch 17 IFNONNULL L234 - false
   */
  @Test
  public void test17()  throws Throwable  {
      String[] stringArray0 = StringUtils.toStringArray((Collection) null);
      assertNull(stringArray0);
  }

  //Test case number: 18
  /*
   * 2 covered goals:
   * 1 org.jsecurity.util.StringUtils.splitKeyValue(Ljava/lang/String;)[Ljava/lang/String;: I8 Branch 18 IFNONNULL L242 - false
   * 2 org.jsecurity.util.StringUtils.clean(Ljava/lang/String;)Ljava/lang/String;: I18 Branch 11 IFLE L151 - false
   */
  @Test
  public void test18()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitKeyValue(" ");
      assertNull(stringArray0);
  }

  //Test case number: 21
  /*
   * 11 covered goals:
   * 1 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I52 Branch 27 IFEQ L330 - false
   * 2 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I58 Branch 28 IF_ICMPLE L330 - false
   * 3 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I65 Branch 29 IF_ICMPNE L330 - true
   * 4 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I83 Branch 30 IFNE L338 - true
   * 5 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I93 Branch 31 IFEQ L339 - false
   * 6 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I105 Branch 32 IF_ICMPNE L343 - false
   * 7 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I109 Branch 33 IFNE L344 - false
   * 8 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I119 Branch 34 IFEQ L345 - false
   * 9 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I52 Branch 27 IFEQ L330 - true
   * 10 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I83 Branch 30 IFNE L338 - false
   * 11 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I48 Branch 26 IF_ICMPNE L327 - false
   */
  @Test
  public void test21()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("].  There is no space from ", 's', 's', 'p', true, true);
      assertNotNull(stringArray0);
  }

  //Test case number: 25
  /*
   * 12 covered goals:
   * 1 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I133 Branch 36 IFNE L348 - true
   * 2 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCC)[Ljava/lang/String;: root-Branch
   * 3 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I48 Branch 26 IF_ICMPNE L327 - false
   * 4 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I52 Branch 27 IFEQ L330 - false
   * 5 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I58 Branch 28 IF_ICMPLE L330 - false
   * 6 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I65 Branch 29 IF_ICMPNE L330 - true
   * 7 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I83 Branch 30 IFNE L338 - true
   * 8 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I93 Branch 31 IFEQ L339 - true
   * 9 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I105 Branch 32 IF_ICMPNE L343 - false
   * 10 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I109 Branch 33 IFNE L344 - false
   * 11 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I119 Branch 34 IFEQ L345 - true
   * 12 org.jsecurity.util.StringUtils.split(Ljava/lang/String;CCCZZ)[Ljava/lang/String;: I181 Branch 38 IFEQ L360 - false
   */
  @Test
  public void test25()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("] to form a key/value pair.", 'm', 'i', 't');
      assertNotNull(stringArray0);
  }
}
