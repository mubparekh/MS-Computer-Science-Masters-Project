/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import org.jsecurity.io.XmlSerializer;

public class XmlSerializerEvoSuiteTest {


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 org.jsecurity.io.XmlSerializer.deserialize([B)Ljava/lang/Object;: I3 Branch 2 IFNONNULL L71 - true
   * 2 org.jsecurity.io.XmlSerializer.serialize(Ljava/lang/Object;)[B: I3 Branch 1 IFNONNULL L49 - true
   * 3 org.jsecurity.io.XmlSerializer.<init>()V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      XmlSerializer xmlSerializer0 = new XmlSerializer();
      Object object0 = new Object();
      byte[] byteArray0 = xmlSerializer0.serialize(object0);
      Object object1 = xmlSerializer0.deserialize(byteArray0);
      assertNotSame(object0, object1);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 org.jsecurity.io.XmlSerializer.serialize(Ljava/lang/Object;)[B: I3 Branch 1 IFNONNULL L49 - false
   */
  @Test
  public void test1()  throws Throwable  {
      XmlSerializer xmlSerializer0 = new XmlSerializer();
      // Undeclared exception!
      try {
        xmlSerializer0.serialize((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * argument cannot be null.
         */
      }
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 org.jsecurity.io.XmlSerializer.deserialize([B)Ljava/lang/Object;: I3 Branch 2 IFNONNULL L71 - false
   * 2 org.jsecurity.io.XmlSerializer.<init>()V: root-Branch
   */
  @Test
  public void test2()  throws Throwable  {
      XmlSerializer xmlSerializer0 = new XmlSerializer();
      // Undeclared exception!
      try {
        xmlSerializer0.deserialize((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument cannot be null.
         */
      }
  }
}
