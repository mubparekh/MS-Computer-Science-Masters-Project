/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.authc.pam;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.jsecurity.authc.AuthenticationException;
import org.jsecurity.authc.AuthenticationInfo;
import org.jsecurity.authc.AuthenticationToken;
import org.jsecurity.authc.SimpleAuthenticationInfo;
import org.jsecurity.authc.UsernamePasswordToken;
import org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class AtLeastOneSuccessfulModularAuthenticationStrategyEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
  } 

  @Before 
  public void initTestCase(){ 
  } 

  @After 
  public void doneWithTestCase(){ 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy.afterAllAttempts(Lorg/jsecurity/authc/AuthenticationToken;Lorg/jsecurity/authc/AuthenticationInfo;)Lorg/jsecurity/authc/AuthenticationInfo;: I3 Branch 1 IFNULL L53 - true
   * 2 org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy.afterAllAttempts(Lorg/jsecurity/authc/AuthenticationToken;Lorg/jsecurity/authc/AuthenticationInfo;)Lorg/jsecurity/authc/AuthenticationInfo;: I16 Branch 3 IFNE L55 - false
   * 3 org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy.<init>()V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
          char[] charArray0 = new char[8];
          Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
          UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("}S}uu@umqHVhg", charArray0, (InetAddress) inet4Address0);
          try {
            atLeastOneSuccessfulModularAuthenticationStrategy0.afterAllAttempts((AuthenticationToken) usernamePasswordToken0, (AuthenticationInfo) null);
            fail("Expecting exception: AuthenticationException");
          } catch(AuthenticationException e) {
            /*
             * Authentication token of type [class org.jsecurity.authc.UsernamePasswordToken] could not be authenticated by any configured realms.  Please ensure that at least one realm can authenticate these tokens.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * 1 org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy.afterAllAttempts(Lorg/jsecurity/authc/AuthenticationToken;Lorg/jsecurity/authc/AuthenticationInfo;)Lorg/jsecurity/authc/AuthenticationInfo;: I3 Branch 1 IFNULL L53 - false
   * 2 org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy.afterAllAttempts(Lorg/jsecurity/authc/AuthenticationToken;Lorg/jsecurity/authc/AuthenticationInfo;)Lorg/jsecurity/authc/AuthenticationInfo;: I6 Branch 2 IFNULL L53 - false
   * 3 org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy.afterAllAttempts(Lorg/jsecurity/authc/AuthenticationToken;Lorg/jsecurity/authc/AuthenticationInfo;)Lorg/jsecurity/authc/AuthenticationInfo;: I16 Branch 3 IFNE L55 - true
   */
  @Test
  public void test1()  throws Throwable  {
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo((Object) "[]", (Object) "UTF-8", "UTF-8");
      SimpleAuthenticationInfo simpleAuthenticationInfo1 = (SimpleAuthenticationInfo)atLeastOneSuccessfulModularAuthenticationStrategy0.afterAllAttempts((AuthenticationToken) usernamePasswordToken0, (AuthenticationInfo) simpleAuthenticationInfo0);
      assertSame(simpleAuthenticationInfo1, simpleAuthenticationInfo0);
  }

  //Test case number: 2
  /*
   * 4 covered goals:
   * 1 org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy.afterAllAttempts(Lorg/jsecurity/authc/AuthenticationToken;Lorg/jsecurity/authc/AuthenticationInfo;)Lorg/jsecurity/authc/AuthenticationInfo;: I6 Branch 2 IFNULL L53 - true
   * 2 org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy.<init>()V: root-Branch
   * 3 org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy.afterAllAttempts(Lorg/jsecurity/authc/AuthenticationToken;Lorg/jsecurity/authc/AuthenticationInfo;)Lorg/jsecurity/authc/AuthenticationInfo;: I3 Branch 1 IFNULL L53 - false
   * 4 org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy.afterAllAttempts(Lorg/jsecurity/authc/AuthenticationToken;Lorg/jsecurity/authc/AuthenticationInfo;)Lorg/jsecurity/authc/AuthenticationInfo;: I16 Branch 3 IFNE L55 - false
   */
  @Test
  public void test2()  throws Throwable  {
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      char[] charArray0 = new char[3];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(".NhXiK", charArray0, false);
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo();
      try {
        atLeastOneSuccessfulModularAuthenticationStrategy0.afterAllAttempts((AuthenticationToken) usernamePasswordToken0, (AuthenticationInfo) simpleAuthenticationInfo0);
        fail("Expecting exception: AuthenticationException");
      } catch(AuthenticationException e) {
        /*
         * Authentication token of type [class org.jsecurity.authc.UsernamePasswordToken] could not be authenticated by any configured realms.  Please ensure that at least one realm can authenticate these tokens.
         */
      }
  }
}
