/*
 * This file was automatically generated by EvoSuite
 */

package br.com.jnfe.base.service;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import br.com.jnfe.base.ICMSExt;
import br.com.jnfe.base.ICMSST;
import br.com.jnfe.base.service.NFeCalculatorImpl;
import java.math.BigDecimal;

public class NFeCalculatorImplEvoSuiteTest {


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 br.com.jnfe.base.service.NFeCalculatorImpl.calculate(Lbr/com/jnfe/base/ICMSExt;)Ljava/math/BigDecimal;: root-Branch
   * 2 br.com.jnfe.base.service.NFeCalculatorImpl.<init>()V: root-Branch
   */
  @Test
  public void test0()  throws Throwable  {
      NFeCalculatorImpl nFeCalculatorImpl0 = new NFeCalculatorImpl();
      // Undeclared exception!
      try {
        nFeCalculatorImpl0.calculate((ICMSExt) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 br.com.jnfe.base.service.NFeCalculatorImpl.calculate(Lbr/com/jnfe/base/ICMSST;)Ljava/math/BigDecimal;: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      NFeCalculatorImpl nFeCalculatorImpl0 = new NFeCalculatorImpl();
      // Undeclared exception!
      try {
        nFeCalculatorImpl0.calculate((ICMSST) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 br.com.jnfe.base.service.NFeCalculatorImpl.internalCalculate(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;: root-Branch
   */
  @Test
  public void test2()  throws Throwable  {
      NFeCalculatorImpl nFeCalculatorImpl0 = new NFeCalculatorImpl();
      BigDecimal bigDecimal0 = new BigDecimal((-1338));
      BigDecimal bigDecimal1 = nFeCalculatorImpl0.internalCalculate(bigDecimal0, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals(17902, bigDecimal1.intValue());
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 br.com.jnfe.base.service.NFeCalculatorImpl.validate(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V: I3 Branch 6 IFNONNULL L101 - true
   * 2 br.com.jnfe.base.service.NFeCalculatorImpl.validate(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V: I14 Branch 7 IFNONNULL L104 - true
   */
  @Test
  public void test3()  throws Throwable  {
      NFeCalculatorImpl nFeCalculatorImpl0 = new NFeCalculatorImpl();
      BigDecimal bigDecimal0 = new BigDecimal((-1338));
      nFeCalculatorImpl0.validate(bigDecimal0, bigDecimal0);
      assertEquals("-1338", bigDecimal0.toString());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 br.com.jnfe.base.service.NFeCalculatorImpl.validate(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V: I3 Branch 6 IFNONNULL L101 - false
   */
  @Test
  public void test4()  throws Throwable  {
      NFeCalculatorImpl nFeCalculatorImpl0 = new NFeCalculatorImpl();
      // Undeclared exception!
      try {
        nFeCalculatorImpl0.validate((BigDecimal) null, (BigDecimal) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Valor da al\u00EDquota n\u00E3o pode ser nulo
         */
      }
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 br.com.jnfe.base.service.NFeCalculatorImpl.validate(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V: I14 Branch 7 IFNONNULL L104 - false
   * 2 br.com.jnfe.base.service.NFeCalculatorImpl.<init>()V: root-Branch
   * 3 br.com.jnfe.base.service.NFeCalculatorImpl.validate(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V: I3 Branch 6 IFNONNULL L101 - true
   */
  @Test
  public void test5()  throws Throwable  {
      NFeCalculatorImpl nFeCalculatorImpl0 = new NFeCalculatorImpl();
      BigDecimal bigDecimal0 = new BigDecimal(1500);
      // Undeclared exception!
      try {
        nFeCalculatorImpl0.validate(bigDecimal0, (BigDecimal) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Valor da base de c\u00E1lculo n\u00E3o pode ser nulo
         */
      }
  }
}
